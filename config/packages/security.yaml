security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # API firewall, protected by token

        admin_api:
            pattern: ^/admin/api
            stateless: true
            provider: app_user_provider
            access_token:
                token_handler: App\Security\AccessTokenHandler

        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            access_token:
                token_handler: App\Security\AccessTokenHandler
                # token_extractors: [ 'security.access_token_extractor.header' ] # optional; by default Authorization: Bearer <token>

        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                default_target_path: app_family_home
                enable_csrf: true
                csrf_parameter: _csrf_token
            logout:
                path: app_logout
                target: app_login
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    # Defining the role hierarchy: an admin is also a member.
    role_hierarchy:
        ROLE_MEMBER: [ROLE_USER]
        ROLE_ADMIN: [ROLE_MEMBER]
        ROLE_SUPER_ADMIN: [ROLE_USER]

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/family, roles: ROLE_USER }

        - { path: ^/admin/api, roles: ROLE_SUPER_ADMIN }

        - { path: ^/api/doc, roles: PUBLIC_ACCESS }

        # The API login endpoint must be public
        - { path: ^/api/login$, roles: PUBLIC_ACCESS, methods: [POST] }

        # The API logout endpoint requires a valid token to function.
        - { path: ^/api/logout$, roles: IS_AUTHENTICATED_FULLY, methods: [POST] }

        # The API section requires at least one authenticated user (valid token)
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

        # "family admin area" requires the ADMIN role
        - { path: ^/admin, roles: [ROLE_SUPER_ADMIN, IS_AUTHENTICATED_FULLY] }

        # Login and registration pages must be public
        - { path : ^/register, roles: PUBLIC_ACCESS }

        - { path: ^/login, roles: PUBLIC_ACCESS }

        # Allows public access to uploaded files ("Open" link)
        - { path: ^/uploads/receipts, roles: PUBLIC_ACCESS }

        # Expenses UI Pages
        - { path: ^/expenses, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
